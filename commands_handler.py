from loader import bot, user_info
from loguru import logger
from telebot import types
from message_handlers.message_handlers import create_user, get_city, photo_to_find, printing_information, \
    hotel_to_find, get_photo, looking_for_photos
from message_handlers.bestdeal import price_range, distances
from db_handler import get_data_from_db

commands = ['start', 'lowprice', 'highprice', 'bestdeal', 'history', 'help']


@bot.message_handler(commands=commands)
def bot_commands(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f'User has sent message: {message.text}.')
    if message.text == '/start':
        bot.send_message(message.chat.id,
                         '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} {0.last_name}!\n–Ø - {1.first_name} –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã '
                         '–ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–µ–ª—å!\n–ñ–º–∏ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!'.format(
                             message.from_user, bot.get_me()))
    elif message.text == '/lowprice':
        create_user(message)
    elif message.text == '/highprice':
        create_user(message)
    elif message.text == '/bestdeal':
        create_user(message)
    elif message.text == '/help':
        bot.send_message(message.chat.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                                          '/lowprice ‚Äî –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –ø–æ —Å–∞–º–æ–π –¥–µ—à—ë–≤–æ–π —Ü–µ–Ω–µ.\n'
                                          '/highprice ‚Äî –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –ø–æ —Å–∞–º–æ–π –¥–æ—Ä–æ–≥–æ–π —Ü–µ–Ω–µ.\n'
                                          '/bestdeal ‚Äî –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã '
                                          '–ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n'
                                          '/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.')
    elif message.text == '/history':
        get_data_from_db(message.chat.id)


@bot.message_handler(content_types='text')
def hello_world(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f'User has sent message: {message.text}.')

    if message.text.lower().startswith('–ø—Ä–∏–≤–µ—Ç'):
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {}! –ì–æ—Ç–æ–≤ –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º?'.format(message.chat.first_name))
        bot.send_message(message.chat.id, '–ñ–º–∏ /help –∏ –ø–æ–≥–Ω–∞–ª–∏! üöÄ')

    else:
        check_status(message.chat.id)


@logger.catch
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: types.CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :param call: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type call: types.CallbackQuery
    """
    logger.info(f'Function {callback_handler.__name__.upper()} started.')
    logger.info(f'User response: {call.data}')

    if call.data == '–î–∞!':
        logger.info(f'Function {callback_handler.__name__.upper()} completed.')
        photo_to_find(call.message)

    elif call.data == '–ù–µ—Ç...':
        bot.send_message(call.message.chat.id, text='–•–æ—Ä–æ—à–æ!')
        bot.send_message(call.message.chat.id, text='–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
        logger.info(f'Function {callback_handler.__name__.upper()} completed.')
        printing_information(call.message)

    elif call.data == 'continue':
        try:
            user_status = user_info[call.message.chat.id].status
            for i_status in user_status.keys():
                if i_status == 1:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    get_city(call.message)
                elif i_status == 2:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    hotel_to_find(call.message)
                elif i_status == 3:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    price_range(call.message)
                elif i_status == 4:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    distances(call.message)
                elif i_status == 5:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    hotel_to_find(call.message)
                elif i_status == 6:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    looking_for_photos(call.message)
                elif i_status == 7:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    photo_to_find(call.message)
                elif i_status == 8:
                    logger.info(f'Function {callback_handler.__name__.upper()} completed.')
                    get_photo(call.message)
                else:
                    logger.error(f'User has sent incorrect data. User has been sent to the beginning.')
                    bot.send_message(chat_id=call.message.chat.id,
                                     text='–ù–∞–∂–º–∏—Ç–µ /help, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

        except KeyError as key_error:
            logger.error(f'Key error, user {key_error} is not created yet. '
                         f'User has been sent to the beginning.')
            bot.send_message(chat_id=key_error, text='–í—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ /help, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è '
                                                     '–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

    elif call.data == 'break':
        logger.info(f'Function {callback_handler.__name__.upper()} completed.')
        bot.send_message(chat_id=call.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ /help, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

    else:
        call_data = call.data.split()
        user_info[call.message.chat.id].city_id = call_data[0]
        user_info[call.message.chat.id].city = ' '.join(call_data[1:])
        logger.info(f'Function {callback_handler.__name__.upper()} completed.')
        hotel_to_find(call.message)


@logger.catch
def check_status(user_id: int) -> None:
    logger.info(f'Function {check_status.__name__.upper()} started.')

    bot.send_message(chat_id=user_id, text='–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.')
    markup_inline = types.InlineKeyboardMarkup()
    item_yes = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue')
    item_no = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='break')
    markup_inline.add(item_yes, item_no)
    bot.send_message(chat_id=user_id, text='–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', reply_markup=markup_inline)
